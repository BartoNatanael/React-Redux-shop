{"version":3,"sources":["util.js","components/Products.js","actions/productActions.js","actions/types.js","actions/cartActions.js","components/Filter.js","components/Basket.js","reducers/productReducer.js","reducers/cartReducers.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["num","Number","toFixed","toLocaleString","Products","this","props","fetchProducts","productItems","products","map","product","className","key","id","href","onClick","addToCart","cartItems","src","sku","alt","title","util","price","Component","connect","state","filteredItems","cart","items","dispatch","fetch","then","res","json","catch","err","data","type","payload","console","log","Array","from","productAlreadyInCart","forEach","item","count","push","localStorage","setItem","JSON","stringify","Filter","filteredProducts","length","value","sort","onChange","e","sortProducts","target","size","filterProducts","filter","x","availableSizes","indexOf","toUpperCase","a","b","Basket","removeFromCart","reduce","c","initialState","combineReducers","action","getItem","parse","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducers","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fb1e526c.chunk.js","sourcesContent":["export default {\n    formatCurrency: function(num){\n        return '$' + Number(num.toFixed(2)).toLocaleString() + ' '\n    }\n}","import React, { Component } from 'react';\nimport util from \"../util\";\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../actions/productActions';\nimport { addToCart } from '../actions/cartActions';\n\nclass Products extends Component {\n   componentWillMount(){\n    this.props.fetchProducts();\n    \n   }\n   \n    render(){\n        const productItems = this.props.products.map((product) => (\n            <div className=\"col-md-4 mb-4\" key={product.id}>\n                <div className=\"thumbnail text-center bg-secondary\">\n                    <a \n                        href={`#${product.id}`} \n                        onClick={()=>this.props.addToCart(this.props.cartItems, product)}\n                    >\n                        <img src={`products/${product.sku}_2.jpg`} alt={product.title}/>\n                        <p>\n                            {product.title}\n                        </p>\n                    </a>\n                    <div>\n                        <b>{util.formatCurrency(product.price)}</b>\n                        <button \n                        className=\"btn btn-primary\"\n                        onClick={()=>this.props.addToCart(this.props.cartItems, product)}>\n                            Add To Card\n                        </button>\n                    </div>\n                </div>\n            </div>)\n        )\n        return(\n            <div className=\"row\">\n                {productItems}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => ({\n    products: state.products.filteredItems,\n    cartItems: state.cart.items,\n  });\n\nexport default connect(mapStateToProps,{fetchProducts, addToCart})(Products)","import {\n    FETCH_PRODUCTS, FILTER_PRODUCTS_BY_SIZE, ORDER_PRODUCTS_BY_PRICE,\n  } from \"./types\";\n  \n\nexport const fetchProducts = () => (dispatch) => {\n    fetch(\"http://localhost:8000/products\")\n      .then((res) => res.json())\n      .catch((err) =>\n        fetch(\"db.json\")\n          .then((res) => res.json())\n          .then((data) => data.products)\n      )\n      .then((data) => {\n        dispatch({ type: FETCH_PRODUCTS, payload: data });console.log(data)\n      });\n      \n  };\n\n  \n  export const filterProducts = (products, size) => (dispatch) => {\n\n    dispatch({\n      type: FILTER_PRODUCTS_BY_SIZE,\n      payload: {\n        size: size,\n        items:\n          size === \"\"\n            ? products\n            : products.filter(\n                (x) => x.availableSizes.indexOf(size.toUpperCase()) >= 0\n              ),\n      },\n    });\n  };\n\n    export const sortProducts = (items, sort) => (dispatch) => {\n    console.log(items)\n    let products = Array.from(items)\n    console.log(products)\n    if (sort !== '') {\n        products.sort((a, b) =>\n          (sort === 'lowestprice'\n            ? ((a.price > b.price) ? 1 : -1)\n            : ((a.price < b.price) ? 1 : -1)));\n      } else {\n        products.sort((a, b) => (a.id > b.id) ? 1 : -1);\n      }\n    \n    dispatch({\n      type: ORDER_PRODUCTS_BY_PRICE,\n      payload: {\n        sort:sort,\n        items: products}\n          \n    });\n  };","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\nexport const FILTER_PRODUCTS_BY_SIZE = 'FILTER_PRODUCTS_BY_SIZE';\nexport const ORDER_PRODUCTS_BY_PRICE = 'ORDER_PRODUCTS_BY_PRICE';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';","import { ADD_TO_CART, REMOVE_FROM_CART } from \"./types\";\r\n\r\nexport const addToCart =(items, product) => (dispatch) => {\r\n\r\n        const cartItems = Array.from(items)\r\n          let productAlreadyInCart = false;\r\n          cartItems.forEach(item=>{\r\n            if(item.id === product.id){\r\n              productAlreadyInCart = true;\r\n              item.count++;\r\n            }\r\n          });\r\n          if(!productAlreadyInCart){\r\n            cartItems.push({ ...product, count: 1 });\r\n          }\r\n          localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\r\n          return dispatch({type: ADD_TO_CART,\r\n            payload:{\r\n                cartItems:cartItems\r\n            }})\r\n        }\r\n\r\nexport const removeFromCart=(items, product) => (dispatch) => {\r\n\r\n        const cartItems = Array.from(items).filter(a => a.id !== product.id);\r\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n        return dispatch({ type: REMOVE_FROM_CART, payload: { cartItems } });\r\n      \r\n}\r\n      \r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {filterProducts, sortProducts} from '../actions/productActions'\n\nclass Filter extends Component {\n    render(){\n        return(\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    {`${this.props.filteredProducts.length} products found.`}\n                </div>\n                <div className=\"col-md-4\">\n                    <label>Order by\n               <select className=\"form-control\" value={this.props.sort} onChange={(e)=>this.props.sortProducts(this.props.filteredProducts, e.target.value)}>\n                            <option value=\"\">Select</option>\n                            <option value=\"lowestprice\">Lowest to highest</option>\n                            <option value=\"highestprice\">Highest to lowest</option>\n                        </select>\n                    </label>\n                </div>\n                <div className=\"col-md-4\">\n                    <label > Filter Size\n               <select className=\"form-control\" value={this.props.size} onChange={(e)=>this.props.filterProducts(this.props.products, e.target.value)}>\n                            <option value=\"\">ALL</option>\n                            <option value=\"x\">XS</option>\n                            <option value=\"s\">S</option>\n                            <option value=\"m\">M</option>\n                            <option value=\"l\">L</option>\n                            <option value=\"xl\">XL</option>\n                            <option value=\"xxl\">XXL</option>\n                        </select>\n                    </label>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    products: state.products.items,\n    filteredProducts: state.products.filteredItems,\n    size: state.products.size,\n    sort: state.products.sort\n})\nexport default connect(mapStateToProps, {filterProducts, sortProducts})(Filter)","import React, { Component } from 'react';\nimport util from '../util';\nimport { connect } from 'react-redux';\nimport { removeFromCart } from '../actions/cartActions';\n\nlet id = 0;\n\nclass Basket extends Component {\n    render() {\n        const {cartItems} = this.props\n        return(\n            <div className=\"alert alert-info\">\n                {cartItems.length===0 ? \" Basket is empty\" : <div> You have {cartItems.length} products in the basket\n                    <div>\n                        <ul>\n                            {cartItems.map(item => \n                                <li key={id++}>\n                                    <b>{item.title} </b>\n                                     X {item.count} = {util.formatCurrency(item.price * item.count)}\n                                    <button className=\"btn btn-danger\"\n                                    onClick={() => this.props.removeFromCart(this.props.cartItems, item)}>\n                                        X\n                                    </button>\n                                </li>\n                            )}\n                        </ul>\n                        Total: {util.formatCurrency( cartItems.reduce((a,c)=> a +c.price*c.count, 0))}\n                    </div>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    cartItems: state.cart.items\n})\nexport default connect(mapStateToProps, {removeFromCart})(Basket)","import { FETCH_PRODUCTS, FILTER_PRODUCTS_BY_SIZE, ORDER_PRODUCTS_BY_PRICE } from \"../actions/types\";\n\nconst initialState = { items: [], filteredItems: [], size: '', sort: ''};\n\nexport default function(state= initialState, action){\n    switch(action.type){\n        case FETCH_PRODUCTS:\n            return { ...state, items: action.payload, filteredItems: action.payload};\n        case FILTER_PRODUCTS_BY_SIZE:\n            return { ...state, filteredItems: action.payload.items, size: action.payload.size};\n        case ORDER_PRODUCTS_BY_PRICE:\n            return { ...state, filteredItems: action.payload.items, sort: action.payload.sort};\n        default:\n            return state;\n    }\n}","import { ADD_TO_CART, REMOVE_FROM_CART } from \"../actions/types\";\r\n\r\nconst initialState = { items: [] };\r\n\r\nexport default function(state= initialState, action){\r\n    switch(action.type){\r\n        case ADD_TO_CART:\r\n            return{\r\n                items: action.payload.cartItems\r\n            }\r\n        case REMOVE_FROM_CART:\r\n            return{\r\n                items: action.payload.cartItems\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\nimport productReducer from \"./productReducer\";\nimport cartReducers from \"./cartReducers\";\n\nexport default combineReducers({\n    products: productReducer,\n    cart: cartReducers,\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from \"./reducers\";\n\nconst initialState = {};\nif(localStorage.getItem('cartItems')){\n  initialState.cart={items: JSON.parse(localStorage.getItem('cartItems'))}\n}\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducers,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\nexport default store;\n","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport './App.css';\nimport Products from './components/Products';\nimport Filter from './components/Filter';\nimport Basket from './components/Basket';\nimport store from './store'\n\nclass App extends Component {\n  \n\n// componentWillMount() {\n//   console.log(this.state.filteredProducts)\n//   if (localStorage.getItem('cartItems')) {\n//     this.setState({ cartItems: JSON.parse(localStorage.getItem('cartItems')) });\n//   }}\n\n\n  // handleRemoveFromCart = (e, product) => {\n  //   this.setState(state => {\n  //     const cartItems = state.cartItems.filter(a => a.id !== product.id);\n  //     localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  //     return { cartItems: cartItems };\n  //   })\n  // }\n \n  \n\n  render(){\n    return (\n      <Provider store={store}>\n        <div className=\"container\">\n          <h1>Ecommerce Shopping Cart Application</h1>\n          <hr/>\n          <div className=\"row\">\n            <div className=\"col-md-8\">\n              <Filter \n              // size={this.state.size}\n              // sort={this.state.sort}\n              // count={this.state.filteredProducts.length}\n              // handleChangeSize={this.handleChangeSize}\n              // handleChangeSort={this.handleChangeSort}\n              />\n              <hr/>\n              <Products \n              // products={this.state.filteredItems} handleAddToCart={this.handleAddToCart} \n              />\n            </div>\n            <div className='col-md-4'>\n              <Basket \n              // cartItems={this.state.cartItems}\n              // handleRemoveFromCart={this.handleRemoveFromCart}\n              />\n            </div>\n          </div>\n          \n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}